//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MCForge.HtmlData.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MCForge.HtmlData.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// *  Font Awesome 4.1.0 by @davegandy - http://fontawesome.io - @fontawesome
        /// *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)
        /// */
        ////* FONT PATH
        /// * -------------------------- */
        ///@font-face {
        ///  font-family: &apos;FontAwesome&apos;;
        ///  src: url(&apos;../fonts/fontawesome-webfont.eot&apos;);
        ///  src: url(&apos;../fonts/fontawesome-webfont.eot&apos;) format(&apos;embedded-opentype&apos;), url(&apos;../fonts/fontawesome-webfont.woff&apos;) format(&apos;woff&apos;), url(&apos;../fonts/fontawesome-webfont.ttf&apos;) format(&apos;truetype&apos;), url(&apos;../fonts/fo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string font_awesome_css {
            get {
                return ResourceManager.GetString("font_awesome_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] FontAwesome_otf {
            get {
                object obj = ResourceManager.GetObject("FontAwesome_otf", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] fontawesome_webfont_eot {
            get {
                object obj = ResourceManager.GetObject("fontawesome_webfont_eot", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] fontawesome_webfont_svg {
            get {
                object obj = ResourceManager.GetObject("fontawesome_webfont_svg", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] fontawesome_webfont_ttf {
            get {
                object obj = ResourceManager.GetObject("fontawesome_webfont_ttf", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] fontawesome_webfont_woff {
            get {
                object obj = ResourceManager.GetObject("fontawesome_webfont_woff", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to meta.foundation-version {
        ///  font-family: &quot;/5.3.1/&quot;; }
        ///
        ///meta.foundation-mq-small {
        ///  font-family: &quot;/only screen/&quot;;
        ///  width: 0em; }
        ///
        ///meta.foundation-mq-medium {
        ///  font-family: &quot;/only screen and (min-width:40.063em)/&quot;;
        ///  width: 40.063em; }
        ///
        ///meta.foundation-mq-large {
        ///  font-family: &quot;/only screen and (min-width:64.063em)/&quot;;
        ///  width: 64.063em; }
        ///
        ///meta.foundation-mq-xlarge {
        ///  font-family: &quot;/only screen and (min-width:90.063em)/&quot;;
        ///  width: 90.063em; }
        ///
        ///meta.foundation-mq-xxlarge {
        ///  font-family: &quot;/only screen and [rest of string was truncated]&quot;;.
        /// </summary>
        public static string foundation {
            get {
                return ResourceManager.GetString("foundation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to meta.foundation-version{font-family:&quot;/5.3.1/&quot;}meta.foundation-mq-small{font-family:&quot;/only screen/&quot;;width:0em}meta.foundation-mq-medium{font-family:&quot;/only screen and (min-width:40.063em)/&quot;;width:40.063em}meta.foundation-mq-large{font-family:&quot;/only screen and (min-width:64.063em)/&quot;;width:64.063em}meta.foundation-mq-xlarge{font-family:&quot;/only screen and (min-width:90.063em)/&quot;;width:90.063em}meta.foundation-mq-xxlarge{font-family:&quot;/only screen and (min-width:120.063em)/&quot;;width:120.063em}meta.foundation-data-attr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string foundation_min_css {
            get {
                return ResourceManager.GetString("foundation_min_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        /// * Foundation Responsive Library
        /// * http://foundation.zurb.com
        /// * Copyright 2014, ZURB
        /// * Free to use under the MIT license.
        /// * http://www.opensource.org/licenses/mit-license.php
        ///*/
        ///(function(e,t,n,r){&quot;use strict&quot;;function l(e){if(typeof e==&quot;string&quot;||e instanceof String)e=e.replace(/^[&apos;\\/&quot;]+|(;\s?})+|[&apos;\\/&quot;]+$/g,&quot;&quot;);return e}var i=function(t){var n=t.length,r=e(&quot;head&quot;);while(n--)r.has(&quot;.&quot;+t[n]).length===0&amp;&amp;r.append(&apos;&lt;meta class=&quot;&apos;+t[n]+&apos;&quot; /&gt;&apos;)};i([&quot;foundation-mq-small&quot;,&quot;foundation-mq-medium&quot;,&quot;foundation [rest of string was truncated]&quot;;.
        /// </summary>
        public static string foundation_min_js {
            get {
                return ResourceManager.GetString("foundation_min_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * jQuery JavaScript Library v2.1.1
        /// * http://jquery.com/
        /// *
        /// * Includes Sizzle.js
        /// * http://sizzlejs.com/
        /// *
        /// * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
        /// * Released under the MIT license
        /// * http://jquery.org/license
        /// *
        /// * Date: 2014-05-01T17:11Z
        /// */
        ///!function(a,b){&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return b(a)}:b(a)}(&quot;undefined&quot;!=typeo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string jquery_js {
            get {
                return ResourceManager.GetString("jquery_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #save-bar,
        ///#menu-bar {
        ///  padding: 10px;
        ///  background: #1b1b1b;
        ///  border-bottom: #101010; }
        ///  #save-bar .button,
        ///  #menu-bar .button {
        ///    margin-bottom: 0; }
        ///
        ///#module-title {
        ///  margin: 8px 20px 0; }
        ///
        ///#save-bar {
        ///  position: fixed;
        ///  bottom: 0;
        ///  left: 0;
        ///  right: 0; }
        ///
        ///.group {
        ///  border-bottom: 1px solid #ccc;
        ///  padding: 10px 20px 0;
        ///  background: #eaeaea; }
        ///  .group .group-header {
        ///    font-size: 20px;
        ///    margin: 0;
        ///    padding-bottom: 10px; }
        ///  .group .settings-node {
        ///    text- [rest of string was truncated]&quot;;.
        /// </summary>
        public static string main_css {
            get {
                return ResourceManager.GetString("main_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $(function() {
        ///
        ///    if(public_checked === &quot;true&quot;) { $(&apos;#is-public&apos;).prop(&apos;checked&apos;, true); }
        ///    if(loadalllevels_checked === &quot;true&quot;) { $(&apos;#loadalllevels&apos;).prop(&apos;checked&apos;, true); }
        ///    if(verifynames_checked === &quot;true&quot;) { $(&apos;#verifynames&apos;).prop(&apos;checked&apos;, true); }
        ///    if(verifying_checked === &quot;true&quot;) { $(&apos;#verifying&apos;).prop(&apos;checked&apos;, true); }
        ///    if(agreeingtorules_checked === &quot;true&quot;) { $(&apos;#agreeingtorules&apos;).prop(&apos;checked&apos;, true); }
        ///
        ///    $(&apos;[data-show-module]&apos;).click(function() {
        ///        $(&quot;#main&quot;) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string main_js {
            get {
                return ResourceManager.GetString("main_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * Modernizr v2.8.3
        /// * www.modernizr.com
        /// *
        /// * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton
        /// * Available under the BSD and MIT licenses: www.modernizr.com/license/
        /// */
        ///window.Modernizr=function(a,b,c){function d(a){t.cssText=a}function e(a,b){return d(x.join(a+&quot;;&quot;)+(b||&quot;&quot;))}function f(a,b){return typeof a===b}function g(a,b){return!!~(&quot;&quot;+a).indexOf(b)}function h(a,b){for(var d in a){var e=a[d];if(!g(e,&quot;-&quot;)&amp;&amp;t[e]!==c)return&quot;pfx&quot;==b?e:!0}return!1}function i(a,b,d){for(var e in a){var g=b[a[e]];if(g!= [rest of string was truncated]&quot;;.
        /// </summary>
        public static string modernizr_js {
            get {
                return ResourceManager.GetString("modernizr_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! normalize.css v3.0.1 | MIT License | git.io/normalize */
        ///
        ////**
        /// * 1. Set default font family to sans-serif.
        /// * 2. Prevent iOS text size adjust after orientation change, without disabling
        /// *    user zoom.
        /// */
        ///
        ///html {
        ///  font-family: sans-serif; /* 1 */
        ///  -ms-text-size-adjust: 100%; /* 2 */
        ///  -webkit-text-size-adjust: 100%; /* 2 */
        ///}
        ///
        ////**
        /// * Remove default margin.
        /// */
        ///
        ///body {
        ///  margin: 0;
        ///}
        ///
        ////* HTML5 display definitions
        ///   ========================================================================== */
        ///
        ////**
        /// * [rest of string was truncated]&quot;;.
        /// </summary>
        public static string normalize_css {
            get {
                return ResourceManager.GetString("normalize_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///    &lt;head&gt;
        ///        &lt;meta charset=&quot;UTF-8&quot;/&gt;
        ///        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
        ///        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;
        ///        &lt;title&gt;Settings&lt;/title&gt;
        ///
        ///        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/foundation.min.css&quot;/&gt;
        ///        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.css&quot;/&gt;
        ///        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;/&gt;
        ///
        ///        &lt;script src=&quot;js/vendor/modernizr.js&quot;&gt;&lt;/script&gt;
        ///    &lt;/head&gt;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string settings_html {
            get {
                return ResourceManager.GetString("settings_html", resourceCulture);
            }
        }
    }
}
